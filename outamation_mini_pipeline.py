# -*- coding: utf-8 -*-
"""outamation-mini-pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eVxnQK8Be9Wu58GVoCUMXNzB0G5sWkUG

# <u>6 Important Fields to Be Extracted:</u>
* Applicant Name (basic)

* Loan Program (basic)

* Loan Amount (basic)

* Interest Rate (basic)

* Underwriting Fee (table-based)

* Appraisal Fee (table-based)
"""

!pip install pymupdf
## if not already installed

## upload file
from google.colab import files

uploaded = files.upload()

## inspect text
import fitz, re, json
doc = fitz.open('lender-worksheet.pdf')
text = ""
for page in doc:
    text += page.get_text("text")

print(text[:1000])

page = doc[0]
blocks = page.get_text("blocks") ## extract text in blocks

blocks.sort(key=lambda b: b[1])  # sort by y position

def get_nearby_value(label_keyword, blocks, indicator, y_tolerance=1):
    label_block = next((b for b in blocks if label_keyword.lower() in b[4].lower()), None) # find the next block that contains the label keyword
    if not label_block:
        return None
    label_y = label_block[1] # get the y0 of the matching block
    for b in blocks:
        if abs(b[1] - label_y) <= y_tolerance and indicator in b[4]:  # find block with similar y0
            return b[4]
    return None

def extractor(entry_title, possible_field_name, indicator, regex_pattern, reg_group=0):
  block = get_nearby_value(possible_field_name, blocks, indicator)
  if not block:
    return None
  value = re.search(regex_pattern, block).group(reg_group)

  location = page.search_for(value)

  rects = page.search_for(value)
  for r in rects:
      bbox = r

  return {
      entry_title: {
            "text": f"{entry_title}: {value}",
            "bbox": [round(bbox.x0, 2), round(bbox.y0, 2), round(bbox.x1, 2), round(bbox.y1, 2)] if bbox else None
        }
    }

applicant_name = extractor('Applicant Name', "Applicant", "",r"[A-Z][A-Za-z\.\']+(?: [A-Z][A-Za-z\.\']+)*(?: ?/ ?[A-Z][A-Za-z\.\']+(?: [A-Z][A-Za-z\.\']+)*)?"
)
loan_program = extractor('Loan Program', "Loan Program", "", r"\d{2}\s+[A-Z]+\s+[A-Z]+\s*-\s*[A-Za-z]+")

loan_amount = extractor('Loan Amount', "Loan Amount", "$", r"\$ ?[\d,]+")

interest_rate = extractor('Interest Rate', "Interest", "%", r"\d+\.\d+\s?%")

underwriting_fee = extractor('Underwriting Fee', "Underwriting", "$", r"([\d,]+\.\d{2})"
)
appraisal_fee = extractor('Appraisal Fee', "Appraisal", "$", r"Appraisal Fee[\s\S]*?\$[\s\n]*([\d,]+\.\d{2})", reg_group=1
)

fields = {}
for field in [underwriting_fee, appraisal_fee, applicant_name, loan_program, loan_amount, interest_rate]:
    if field:
        fields.update(field)

print(json.dumps(fields, indent=2))

